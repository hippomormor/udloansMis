
package udloansmis;

import DTO.ComponentDTO;
import DTO.LoanDTO;
import DTO.StudentDTO;
import RMI.IDatabaseRMI;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.rmi.RemoteException;
import javax.swing.JOptionPane;
import security.TokenHandlerClient;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JPopupMenu;
import static javax.swing.SwingConstants.CENTER;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Thomas D. Høybye-Jensen, Christian Genter & Marcus Persson
 */
public class UdloansMis_UdlånsMis extends javax.swing.JFrame {

    private final UdloansMis_Dato dato = new UdloansMis_Dato(this);
    private final String serverIP;
    private final JFrame logFrame;
    private UdloansMis_Log logPanel;
    private boolean logEnabled = false;
    private UdloansMis_CheckForServer checkforserver;
    private final TokenHandlerClient tokenhandler;
    private IDatabaseRMI database;
    JPopupMenu popupMenu;
    JCheckBoxMenuItem menuItemAlle;
    JCheckBoxMenuItem menuItemUdl;
    JCheckBoxMenuItem menuItemNotUdl;
    JCheckBoxMenuItem menuItemStudent;
    JCheckBoxMenuItem menuItemBarcode;
    UdloansMis_CellRenderer cellrenderer;

    private boolean searchStudent = false;
    private boolean searchBarcode = false;
    private int searchState = 1;        // 0 == All, 1 == Loaned, 2 == Unloaned
    private String searchText = "";

    public UdloansMis_UdlånsMis(TokenHandlerClient tokenhandler, IDatabaseRMI database, String serverIP) {
        this.logFrame = new JFrame("UdlånsMis v1.0 Log");
        this.tokenhandler = tokenhandler;
        this.database = database;
        this.serverIP = serverIP;
    }

    public void init() {
        
        // Initialize main GUI components
        initComponents();
        
        // Make cell-renderer & center all text in table
        cellrenderer = new UdloansMis_CellRenderer();
        cellrenderer.setHorizontalAlignment(CENTER);
        ((DefaultTableCellRenderer) jTable.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(CENTER);
        jTable.setDefaultRenderer(String.class, cellrenderer);
        
        // Make popup-menu & options then add options to popup-menu
        popupMenu = new JPopupMenu();
        menuItemAlle = new JCheckBoxMenuItem("Vis alle komponenter");
        menuItemUdl = new JCheckBoxMenuItem("Vis udlånte komponenter");
        menuItemNotUdl = new JCheckBoxMenuItem("Vis ikke-udlånte komponenter");
        menuItemBarcode = new JCheckBoxMenuItem("Søg kun på stregkode");
        menuItemStudent = new JCheckBoxMenuItem("Søg kun på studienummer");
        popupMenu.add(menuItemAlle);
        popupMenu.add(menuItemUdl);
        popupMenu.add(menuItemNotUdl);
        popupMenu.addSeparator();
        popupMenu.add(menuItemBarcode);
        popupMenu.add(menuItemStudent);
        
        // Set states on right click options
        menuItemUdl.setState(true);
        menuItemUdl.setEnabled(false);
        
        // Start date thread to show time/date in GUI
        Thread dateThread = new Thread(dato);
        dateThread.start();
        
        // Start server-checking thread
        checkforserver = new UdloansMis_CheckForServer(this, tokenhandler, database, serverIP);
        Thread checkForServerThread = new Thread(checkforserver);
        checkForServerThread.start();
        
        // Intialize log components
        startLog();
    }

    // Method to set color & text on server status-bar
    public void CheckServer(boolean isConnectedToServer) {
        if (isConnectedToServer == true) {
            jTextFieldServerCheck.setForeground(new java.awt.Color(255, 255, 255));
            jTextFieldServerCheck.setBackground(new java.awt.Color(0, 150, 0));
            jTextFieldServerCheck.setText("Forbundet til komponentserver på " + serverIP);
        } else {
            jTextFieldServerCheck.setForeground(new java.awt.Color(255, 255, 255));
            jTextFieldServerCheck.setBackground(new java.awt.Color(150, 0, 0));

            jTextFieldServerCheck.setText("Ikke forbundet til komponentserver, automatisk genoprettelse foregår");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextFieldStregkode = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldServerCheck = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jRadioButtonLog = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(896, 743));

        jTextFieldStregkode.setText("Stregkode eller navn");
        jTextFieldStregkode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextFieldStregkodeMouseClicked(evt);
            }
        });
        jTextFieldStregkode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldStregkodeActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Scan eller søg efter komponent");

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 36)); // NOI18N
        jLabel3.setText("UdlånsMis v1.0");

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Søg i database");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Dato");

        jTextFieldServerCheck.setEditable(false);
        jTextFieldServerCheck.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldServerCheck.setText("ServerCheck");
        jTextFieldServerCheck.setFocusable(false);
        jTextFieldServerCheck.setRequestFocusEnabled(false);
        jTextFieldServerCheck.setVerifyInputWhenFocusTarget(false);

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton2.setText("Udlån");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jButton3.setText("Aflevering");
        jButton3.setActionCommand("Aflever");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jRadioButtonLog.setText("Log");
        jRadioButtonLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonLogActionPerformed(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Navn", "Stregkodenummer", "Studienummer", "Udlånsdato", "Afleveringsdato", "Dage til aflevering", "Afleveret"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable.setFocusable(false);
        jTable.setRequestFocusEnabled(false);
        jTable.setRowSelectionAllowed(false);
        jTable.getTableHeader().setReorderingAllowed(false);
        jTable.setVerifyInputWhenFocusTarget(false);
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable);
        if (jTable.getColumnModel().getColumnCount() > 0) {
            jTable.getColumnModel().getColumn(6).setMinWidth(30);
            jTable.getColumnModel().getColumn(6).setPreferredWidth(30);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 860, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldStregkode, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)))
                        .addGap(0, 54, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextFieldServerCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButtonLog))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldStregkode, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel4))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldServerCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButtonLog, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton2, jButton3});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jTextFieldStregkode});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButtonLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonLogActionPerformed
        setLog();
    }//GEN-LAST:event_jRadioButtonLogActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String dialogText = "";
        String errorText = "";
        String buttonText = "";
        String barcode = "";
        String credentials = "";
        ComponentDTO component = null;

        // *****************************************************************************
        // ***************************** SCAN THE BARCODE ******************************
        // *****************************************************************************
        errorText = "";
        dialogText = SCAN_BARCODE;
        while (true) {
            barcode = JOptionPane.showInputDialog(null, errorText + dialogText);
            if (barcode == null) {
                JOptionPane.showMessageDialog(null, DELIVERY_CANCELLED, NOTE, JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!barcode.matches("^([0-9]{6,10})$")) {
                errorText = INCORRECT_BARCODE_FORMAT;
                continue;
            }
            try {
                component = database.getComponent(barcode, tokenhandler.getKeyToken(), tokenhandler.getID());
                if (component == null) {
                    errorText = INCORRECT_BARCODE_FORMAT;
                    continue;
                }
                if (!isLoaned(barcode)) {
                    errorText = COMPONENT_IS_NOT_LOANED;
                    continue;
                }
            } catch (RemoteException ex) {
                errorText = COMMUNICATION_ERROR;
                continue;
            }
            break;

        }

        // *****************************************************************************
        // **************************** INPUT CREDENTIALS ******************************
        // *****************************************************************************
        errorText = "";
        dialogText = INPUT_CREDENTIALS;
        while (true) {
            credentials = JOptionPane.showInputDialog(null, errorText + dialogText);
            if (credentials == null) {
                JOptionPane.showMessageDialog(null, DELIVERY_CANCELLED, NOTE, JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (credentials.length() < 2 || credentials.length() > 30) {
                errorText = INCORRECT_CREDENTIALS_FORMAT;
                continue;
            }
            break;
        }

        // *****************************************************************************
        // ***************************** CONFIRM DELIVERY ******************************
        // *****************************************************************************
        buttonText = CONFIRM;
        errorText = "";
        dialogText = DOUBLE_CHECK_DELIVERY;
        while (true) {
            String resumeTekstBoks = String.format(errorText + dialogText, barcode, component.getComponentGroup().getName(), component.getComponentNumber());
            Object[] options = {buttonText, CANCEL};
            int n = JOptionPane.showOptionDialog(null, resumeTekstBoks, CONFIRM_LOAN, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
            if (n != 0) {
                JOptionPane.showMessageDialog(null, DELIVERY_CANCELLED, NOTE, JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                LoanDTO loan = findLoaned(barcode);
                if (loan == null) {
                    JOptionPane.showMessageDialog(null, DELIVERY_CANCELLED, NOTE, JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Date currentDate = new Date();
                loan.setDeliveryDate(dateToString(currentDate));
                loan.setDeliveryDateFromDate(currentDate);
                loan.setDeliveredTo(credentials);
                int OK = database.updateLoan(loan, tokenhandler.getKeyToken(), tokenhandler.getID());
                if (OK < 1) {
                    errorText = COMMUNICATION_ERROR;
                    buttonText = TRY_AGAIN;
                    continue;
                }
            } catch (RemoteException ex) {
                errorText = COMMUNICATION_ERROR;
                buttonText = TRY_AGAIN;
                continue;
            }
            break;
        }
        JOptionPane.showMessageDialog(null, DELIVERY_SUCCESSFUL);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String dialogText = "";
        String errorText = "";
        String buttonText = "";
        String barcode = "";
        String studentNumber = "";
        String deliveryDateString = "";
        int daysUntilDelivery = 0;
        Date deliveryDate = null;
        Date currentDate = null;

        // *****************************************************************************
        // ***************************** SCAN THE BARCODE ******************************
        // *****************************************************************************
        errorText = "";
        dialogText = SCAN_BARCODE;
        while (true) {
            barcode = JOptionPane.showInputDialog(null, errorText + dialogText);
            if (barcode == null) {
                JOptionPane.showMessageDialog(null, LOAN_CANCELLED, NOTE, JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!barcode.matches("^([0-9]{6,10})$")) {
                errorText = INCORRECT_BARCODE_FORMAT;
                continue;
            }
            try {
                ComponentDTO component = database.getComponent(barcode, tokenhandler.getKeyToken(), tokenhandler.getID());
                if (component == null) {
                    errorText = COMPONENT_DOESNT_EXIST;
                    continue;
                }
                if (component.getStatus() != 1) {
                    errorText = COMPONENT_INACTIVE;
                    continue;
                }
                if (isLoaned(barcode)) {
                    errorText = COMPONENT_IS_LOANED;
                    continue;
                }
            } catch (RemoteException ex) {
                errorText = COMMUNICATION_ERROR;
                continue;
            }
            break;
        }

        // *****************************************************************************
        // ************************* SCAN THE STUDENT NUMBER ***************************
        // *****************************************************************************
        errorText = "";
        dialogText = SCAN_STUDENTNR;
        while (true) {
            studentNumber = JOptionPane.showInputDialog(null, errorText + dialogText);
            if (studentNumber == null) {
                JOptionPane.showMessageDialog(null, LOAN_CANCELLED, NOTE, JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!studentNumber.matches("^([sS][0-9]{6})$")) {
                errorText = INCORRECT_STUDENTNR_FORMAT;
                continue;
            }
            try {
                StudentDTO student = database.getStudent(studentNumber, tokenhandler.getKeyToken(), tokenhandler.getID());
                if (student == null) {
                    errorText = STUDENTNR_DOESNT_EXIST;
                    continue;
                }
                if (student.getStatus() != 1) {
                    errorText = STUDENT_IS_INACTIVE;
                    continue;
                }

            } catch (RemoteException ex) {
                errorText = COMMUNICATION_ERROR;
                continue;
            }
            break;
        }

        // *****************************************************************************
        // ************************** TYPE THE DELIVERY DATE ***************************
        // *****************************************************************************
        errorText = "";
        dialogText = INPUT_DELIVERY_DATE;
        while (true) {
            deliveryDateString = JOptionPane.showInputDialog(null, String.format(errorText + dialogText, dateToString(new Date())));
            if (deliveryDateString == null) {
                JOptionPane.showMessageDialog(null, LOAN_CANCELLED, NOTE, JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (!deliveryDateString.matches("^(0?[1-9]|[12][0-9]|3[01])[/](0?[1-9]|1[012])[-](20)?[0-9][0-9]$")) {
                errorText = INCORRECT_DATE_FORMAT;
                continue;
            }
            currentDate = new Date();
            deliveryDate = getDateFromString(deliveryDateString);
            daysUntilDelivery = (int) ((deliveryDate.getTime() - currentDate.getTime()) / 86400000) + 1;
            if (daysUntilDelivery < 0) {
                errorText = DATE_IS_OUTDATED;
                continue;
            }
            break;
        }

        // *****************************************************************************
        // ******************************* CONFIRM LOAN ********************************
        // *****************************************************************************
        buttonText = CONFIRM;
        errorText = "";
        dialogText = DOUBLE_CHECK_LOAN;
        while (true) {
            String resumeTekstBoks = String.format(errorText + dialogText, barcode, studentNumber, daysUntilDelivery);
            Object[] options = {buttonText, CANCEL};
            int n = JOptionPane.showOptionDialog(null, resumeTekstBoks, CONFIRM_LOAN, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
            if (n != 0) {
                JOptionPane.showMessageDialog(null, LOAN_CANCELLED, NOTE, JOptionPane.ERROR_MESSAGE);
                return;
            }
            try {
                LoanDTO loan = new LoanDTO();
                loan.setComponent(database.getComponent(barcode, tokenhandler.getKeyToken(), tokenhandler.getID()));
                loan.setBarcode(barcode);
                loan.setStudentId(studentNumber);
                loan.setLoanDateFromDate(currentDate);
                loan.setDueDateFromDate(deliveryDate);
                int OK = database.createLoan(loan, tokenhandler.getKeyToken(), tokenhandler.getID());
                if (OK < 1) {
                    errorText = COMMUNICATION_ERROR;
                    buttonText = TRY_AGAIN;
                    continue;
                }
            } catch (RemoteException ex) {
                errorText = COMMUNICATION_ERROR;
                buttonText = TRY_AGAIN;
                continue;
            }
            break;
        }
        JOptionPane.showMessageDialog(null, LOAN_SUCCESSFUL);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        searchText = jTextFieldStregkode.getText();

        // Check what filter is clicked & set booleans and options acccordingly, then do search with filters
        ActionListener menuListener = (ActionEvent event) -> {
            try {
                if (event.getSource() == menuItemAlle) {
                    if (searchState != 0) {
                        searchState = 0;
                        menuItemAlle.setState(true);
                        menuItemUdl.setState(false);
                        menuItemNotUdl.setState(false);
                        menuItemAlle.setEnabled(false);
                        menuItemUdl.setEnabled(true);
                        menuItemNotUdl.setEnabled(true);
                        if (!searchText.equals("Stregkode eller navn"))
                        search(searchText);
                    }
                } else if (event.getSource() == menuItemUdl) {
                    if (searchState != 1) {
                        searchState = 1;
                        menuItemAlle.setState(false);
                        menuItemUdl.setState(true);
                        menuItemNotUdl.setState(false);
                        menuItemAlle.setEnabled(true);
                        menuItemUdl.setEnabled(false);
                        menuItemNotUdl.setEnabled(true);
                        if (!searchText.equals("Stregkode eller navn")) {
                            search(searchText);
                        }
                    }
                } else if (event.getSource() == menuItemNotUdl) {
                    if (searchState != 2) {
                        searchState = 2;
                        menuItemAlle.setState(false);
                        menuItemUdl.setState(false);
                        menuItemNotUdl.setState(true);
                        menuItemAlle.setEnabled(true);
                        menuItemUdl.setEnabled(true);
                        menuItemNotUdl.setEnabled(false);
                        if (!searchText.equals("Stregkode eller navn")) {
                            search(searchText);
                        }
                    }
                } else if (event.getSource() == menuItemBarcode) {
                    if (!searchBarcode) {
                        searchStudent = false;
                    }
                    searchBarcode = !searchBarcode;
                    menuItemBarcode.setState(searchBarcode);
                    menuItemStudent.setState(searchStudent);
                    if (!searchText.equals("Stregkode eller navn")) {
                        search(searchText);
                    }
                } else if (event.getSource() == menuItemStudent) {
                    if (!searchStudent) {
                        searchBarcode = false;
                    }
                    searchStudent = !searchStudent;
                    menuItemBarcode.setState(searchBarcode);
                    menuItemStudent.setState(searchStudent);
                    if (!searchText.equals("Stregkode eller navn")) {
                        search(searchText);
                    }
                }
            } catch (RemoteException e) {
                logPanel.println("Fejl ved kommunikation." + e.getMessage());
            }
        };

        // Add listeners to filter-menu options
        menuItemAlle.addActionListener(menuListener);
        menuItemUdl.addActionListener(menuListener);
        menuItemNotUdl.addActionListener(menuListener);
        menuItemBarcode.addActionListener(menuListener);
        menuItemStudent.addActionListener(menuListener);
        
        // Show filter-menu when right mouse-button is clicked
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            jTable.setComponentPopupMenu(popupMenu);
            popupMenu.show(jTable, evt.getX(), evt.getY());
            popupMenu.setVisible(true);
        }
    }//GEN-LAST:event_jTableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Search when search-button is pressed
        try {
            search(jTextFieldStregkode.getText());
        } catch (RemoteException ex) {
            logPanel.println("Fejl ved kommunikation." + ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextFieldStregkodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldStregkodeActionPerformed
        // Search when 'Enter' is pressed in search-field
        try {
            search(jTextFieldStregkode.getText());
        } catch (RemoteException ex) {
            logPanel.println("Fejl ved kommunikation." + ex.getMessage());
        }
    }//GEN-LAST:event_jTextFieldStregkodeActionPerformed

    private void jTextFieldStregkodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldStregkodeMouseClicked
        // Empty text box when clicked
        jTextFieldStregkode.setText("");
    }//GEN-LAST:event_jTextFieldStregkodeMouseClicked

    public void setLanguage() {
        dialogTexts = new String[]{
            "Scan or type in the barcode on the component.\n(Fx. 12345678)",
            "Put the studentcard on the RFID læser, or type it in manually.\n(Fx. s123456)",
            "Returned to: (Type name or initials)",
            "Type in the due date, with the following format dd/MM-yy. (Fx. %s)",
            "Do you wish to create a loan for the following component?\n Barcode: %s, to %s, for %s days?",
            "Do you wish to deliver the following component?\nBarcode: %s, component type: %s (#%s)?",
            "The loan process has been cancelled.",
            "The delivering process has been cancelled.",
            "Confirm delivery",
            "Confirm loan",
            "Confirm",
            "Cancel",
            "Try again",
            "Observe!!",
            "The loan is registered.",
            "The delivery is completed.",
            "Incorrect barcode format!\n",
            "Incorrect studentnumber format!\n",
            "Incorrect credentials format!\n",
            "Incorrect date format!\n",
            "The component doesn't exist!\n",
            "The studentnumber doesn't exist!\n",
            "The component is inactive!\n",
            "The studentnumber is inactive!\n",
            "The component is already lent out!\n",
            "The component isn't lent out!\n",
            "Outdated date!\n",
            "Communication error!\n"
        };
    }

    String[] dialogTexts = new String[]{
        "Scan eller indtast stregkodenummer på udlånskomponent.\n(Ex. 12345678)",
        "Læg studiekortet på RFID læser, eller indtast studienummer.\n(Ex. s123456)",
        "Returneret til: (Indtast navn)",
        "Indtast afleveringsdato i dette format dd/MM-yy. (Ex. %s)",
        "Ønsker du at lave et udlån af følgende komponent?\nStregkode: %s, til %s i %s dage?",
        "Ønsker du at aflevere følgende komponent?\nStregkode: %s, komponent navn: %s?",
        "Udlånet er afbrudt.",
        "Aflevereringen er afbrudt.",
        "Bekræft afleverering",
        "Bekræft udlån",
        "Bekræft",
        "Afbryd",
        "Prøv igen",
        "Bemærk!",
        "Udlånet er gennemført.",
        "Aflevereringen er gennemført.",
        "Forkert stregkode format!\n",
        "Forkert studienummer format!\n",
        "Forkert credentials format!\n",
        "Forkert dato format!\n",
        "Komponenten findes ikke!\n",
        "Studienumeret findes ikke!\n",
        "Komponenten er inaktiv!\n",
        "Studienumeret er inaktiv!\n",
        "Komponenten er allerede lånet ud!\n",
        "Komponenten er ikke lånet ud!\n",
        "Forældet dato!\n",
        "Kommunikations fejl!\n"
    };

    final String SCAN_BARCODE = dialogTexts[0];
    final String SCAN_STUDENTNR = dialogTexts[1];
    final String INPUT_CREDENTIALS = dialogTexts[2];
    final String INPUT_DELIVERY_DATE = dialogTexts[3];
    final String DOUBLE_CHECK_LOAN = dialogTexts[4];
    final String DOUBLE_CHECK_DELIVERY = dialogTexts[5];
    final String LOAN_CANCELLED = dialogTexts[6];
    final String DELIVERY_CANCELLED = dialogTexts[7];
    final String CONFIRM_DELIVERY = dialogTexts[8];
    final String CONFIRM_LOAN = dialogTexts[9];
    final String CONFIRM = dialogTexts[10];
    final String CANCEL = dialogTexts[11];
    final String TRY_AGAIN = dialogTexts[12];
    final String NOTE = dialogTexts[13];
    final String LOAN_SUCCESSFUL = dialogTexts[14];
    final String DELIVERY_SUCCESSFUL = dialogTexts[15];

    final String INCORRECT_BARCODE_FORMAT = dialogTexts[16];
    final String INCORRECT_STUDENTNR_FORMAT = dialogTexts[17];
    final String INCORRECT_CREDENTIALS_FORMAT = dialogTexts[18];
    final String INCORRECT_DATE_FORMAT = dialogTexts[19];
    final String COMPONENT_DOESNT_EXIST = dialogTexts[20];
    final String STUDENTNR_DOESNT_EXIST = dialogTexts[21];
    final String COMPONENT_INACTIVE = dialogTexts[22];
    final String STUDENT_IS_INACTIVE = dialogTexts[23];
    final String COMPONENT_IS_LOANED = dialogTexts[24];
    final String COMPONENT_IS_NOT_LOANED = dialogTexts[25];
    final String DATE_IS_OUTDATED = dialogTexts[26];
    final String COMMUNICATION_ERROR = dialogTexts[27];


    public void setDate(String date) {
        jLabel5.setText(date);
    }

    private void search(String keyword) throws RemoteException {
        searchText = keyword;
        // Empty table
        for (int i = 0; i < jTable.getRowCount(); i++) {
            for (int j = 0; j < jTable.getColumnCount(); j++) {
                jTable.setValueAt("", i, j);
            }
        }
        LoanDTO[] loans;
        // Check filter and get DTO
        if (searchStudent) {
            loans = database.getLoansForStudent(keyword, tokenhandler.getKeyToken(), tokenhandler.getID());
        } else if (searchBarcode) {
            loans = database.getLoansForBarcode(keyword, tokenhandler.getKeyToken(), tokenhandler.getID());
        } else {
            loans = database.searchLoans(keyword, tokenhandler.getKeyToken(), tokenhandler.getID());
        }
        try {
            // Check if loaned and paint table
            int rowCount = 0;
            for (int i = 0; i < loans.length; i++) {
                if (searchState == 0) {
                    paintTable(loans[i], rowCount++);
                } else if (searchState == 1 && loans[i].getDeliveryDate() == null) {
                    paintTable(loans[i], rowCount++);
                } else if (searchState == 2 && loans[i].getDeliveryDate() != null) {
                    paintTable(loans[i], rowCount++);
                }
            }
        } catch (NullPointerException ex) {
            logPanel.println("Intet resultat");
        }
    }

    
    
    private void paintTable(LoanDTO loan, int rowCount) throws NullPointerException {      
        // Calculate current date
        Date curDate = new Date();
        double msPerDay = 86400 * 1000;
        int dageTilAflevering = (int) ((loan.getDueDateAsDate().getTime() - curDate.getTime()) / msPerDay) + 1;
        
        // Paint collumns with DTO data
        jTable.setValueAt(loan.getComponent().getComponentGroup().getName(), rowCount, 0);
        jTable.setValueAt(loan.getBarcode(), rowCount, 1);
        jTable.setValueAt(loan.getStudentId(), rowCount, 2);
        jTable.setValueAt(loan.getLoanDate(), rowCount, 3);
        jTable.setValueAt(loan.getDueDate(), rowCount, 4);
        jTable.setValueAt(Integer.toString(dageTilAflevering), rowCount, 5);
        jTable.setValueAt(loan.getDeliveryDate(), rowCount, 6);
        
    }

    private boolean isLoaned(String barcode) throws RemoteException {
        return findLoaned(barcode) != null;
    }

    private LoanDTO findLoaned(String barcode) throws RemoteException {
        LoanDTO[] loans = database.getLoansForBarcode(barcode, tokenhandler.getKeyToken(), tokenhandler.getID());
        if (loans == null) { // first time loaned check
            return null;
        }
        for (LoanDTO picked_loan : loans) {
            if (picked_loan.getDeliveryDate() == null) {
                return picked_loan;
            }
        }
        return null;
    }

    private String dateToString(Date currentDate) {
        return format.format(currentDate);
    }

    SimpleDateFormat format = new SimpleDateFormat("dd/MM-yy");

    private Date getDateFromString(String dateString) {
        String first = dateString.substring(0, dateString.indexOf("-") + 1);
        String last = dateString.substring(dateString.indexOf("-") + 1, dateString.length());
        if (last.length() < 4) {
            dateString = first + "20" + last;
        }
        Date date = null;
        try {
            date = format.parse(dateString);
        } catch (ParseException ex) {
            return null;
        }

        return date;
    }

    // Initialise log
    private void startLog() {

        // Create jPanel
        logPanel = new UdloansMis_Log();

        // Add panel to window
        logFrame.add(logPanel);
        logFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        logFrame.setSize(570, 650);

        // Add windowListener to check for window closing;
        logFrame.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                logEnabled = false;
                jRadioButtonLog.setSelected(false);
            }
        });
    }

    // Toggle log-window
    private void setLog() {
        if (!logEnabled) {
            // Show window
            logFrame.setVisible(true);
            logEnabled = true;
        } else {
            logFrame.setVisible(false);
            logEnabled = false;
        }
    }

    // Method to sync database when connection is lost
    public void setDatabase(IDatabaseRMI database) {
        this.database = database;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton jRadioButtonLog;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable;
    private javax.swing.JTextField jTextFieldServerCheck;
    private javax.swing.JTextField jTextFieldStregkode;
    // End of variables declaration//GEN-END:variables

}
